scalar Time
scalar Any
scalar Map
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

type Flag {
    id: ID!
    key: String!
    name: String!
    description: String
    enabled: Boolean!
    variants: [Variant!]!
    rules: [FlagRule!]!
    defaultVariantWhenOn: Variant
    defaultVariantWhenOff: Variant
    createdAt: Time!
    updatedAt: Time
}

type Variant {
    id: ID!
    description: String
    value: Any!
}

type Constraint {
    id: ID!
    property: String!
    operation: Operation!
    values: [Any]!
}

type Distribution {
    id: ID!
    variant: Variant!
    percentage: Int!
}

interface Ruler {
    id: ID!
    constraints: [Constraint!]
}

type FlagRule implements Ruler {
    id: ID!
    constraints: [Constraint!]
    distributions: [Distribution!]
}

type SegmentRule implements Ruler {
    id: ID!
    constraints: [Constraint!]
}

type Segment {
    id: ID!
    name: String!
    description: String
    rules: [SegmentRule!]!
    createdAt: Time!
    updatedAt: Time
}

type User {
    id: ID!
    context: Map!
    updatedAt: Time!
    evaluations(search: String, offset: Int, limit: Int): EvaluationResults! @goField(forceResolver: true)
}

type Evaluation {
    id: ID!
    flagId: ID!
    flagKey: String!
    flagVersion: Int!
    value: Any
    createdAt: Time!
}

enum Operation {
    ONE_OF
    NOT_ONE_OF
    GREATER
    GREATER_OR_EQUAL
    LOWER
    LOWER_OR_EQUAL
    EXISTS
    DOESNT_EXIST
    CONTAINS
    DOESNT_CONTAIN
    STARTS_WITH
    DOESNT_START_WITH
    ENDS_WITH
    DOESNT_END_WITH
    MATCHES_REGEX
    DOESNT_MATCH_REGEX
    IS_IN_SEGMENT
    ISNT_IN_SEGMENT
    IS_IN_NETWORK
}

type Query {
    ping: Boolean!
}

type Mutation {
    ping: Boolean!
}